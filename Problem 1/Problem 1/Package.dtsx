<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/4/2024 7:11:09 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="EJS"
  DTS:CreatorName="EJS\E.J.S"
  DTS:DTSID="{7451542F-113A-4781-BFD8-6CD028608D96}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="2"
  DTS:VersionGUID="{6DDA1ED2-5175-4608-9671-257EB1AE6289}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{f6b04bfd-280f-4a21-9c18-6a12cf2401f8}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9c9417615eec4330a5e98fc0ca952346"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="13.0.3" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="ST_9c9417615eec4330a5e98fc0ca952346.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{36EA26E8-7D2B-443D-AB74-08112D3CFCE6}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9cd3484258e043508f3ab7cdbbafd1cb</RootNamespace>
    <AssemblyName>ST_9c9417615eec4330a5e98fc0ca952346</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=13.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\E.J.S\AppData\Local\Temp\Vsta\SSIS_ST160\VstaeUZQaxoqRUSOSlNQ1uBCYg\packages\Newtonsoft.Json.13.0.3\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
#endregion

namespace ST_9cd3484258e043508f3ab7cdbbafd1cb
{
    public class College
    {
        [JsonProperty("domains")]
        public List<string> Domains { get; set; }

        [JsonProperty("state-province")]
        public string StateProvince { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("web_pages")]
        public List<string> WebPages { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("alpha_two_code")]
        public string AlphaTwoCode { get; set; }
    }

    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string currentDateTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            string logFolder = @"C:\Files\Logs\";

            try
            {
                // Ensure log folder exists
                if (!Directory.Exists(logFolder))
                {
                    Directory.CreateDirectory(logFolder);
                }
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                var json = "";
                using (WebClient wc = new WebClient())
                {
                    json = wc.DownloadString("http://universities.hipolabs.com/search");
                }

                List<College> colleges = JsonConvert.DeserializeObject<List<College>>(json);

                // ... (rest of your code)

                foreach (College college in colleges)
                {
                    string connectionString = @"Data Source=EJS; Initial Catalog=AssignmentDWH;Integrated Security=True;";
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        // Open the connection
                        connection.Open();

                        // Create the insert statement
                        string insertStatement = "INSERT INTO University (Domains, StateProvince, Name, WebPages, Country, AlphaTwoCode) " +
                        "VALUES (@Domains, @StateProvince, @Name, @WebPages, @Country, @AlphaTwoCode)";

                        // Create a SqlCommand object with the insert statement and the SqlConnection object
                        SqlCommand command = new SqlCommand(insertStatement, connection);



                        // Add parameters to the SqlCommand object
                        command.Parameters.AddWithValue("@Domains", college.Domains != null ? (object)string.Join(", ", college.Domains) : DBNull.Value);
                        command.Parameters.AddWithValue("@StateProvince", college.StateProvince != null ? (object)college.StateProvince : DBNull.Value);
                        command.Parameters.AddWithValue("@Name", college.Name != null ? (object)college.Name : DBNull.Value);
                        command.Parameters.AddWithValue("@WebPages", college.WebPages != null ? (object)string.Join(", ", college.WebPages) : DBNull.Value);
                        command.Parameters.AddWithValue("@Country", college.Country != null ? (object)college.Country : DBNull.Value);
                        command.Parameters.AddWithValue("@AlphaTwoCode", college.AlphaTwoCode != null ? (object)college.AlphaTwoCode : DBNull.Value);

                        // Execute the insert statement
                        int rowsAffected = command.ExecuteNonQuery();
                    }
                }



            }
            catch (Exception exception)
            {
                using (StreamWriter sw = File.CreateText(Path.Combine(logFolder, "ErrorLog_" + currentDateTime + ".log")))
                {
                    sw.WriteLine(exception.ToString());
                }
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Settings.get_Default():ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Sett" +
    "ings")]

namespace ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_9c9417615eec4330a5e98fc0ca952346</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_9c9417615eec4330a5e98fc0ca952346</msb:DisplayName>
    <msb:ProjectId>{CB43039E-EFCD-4FA9-9EC8-063284DB0131}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_9c9417615eec4330a5e98fc0ca952346.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9cd3484258e043508f3ab7cdbbafd1cb")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9cd3484258e043508f3ab7cdbbafd1cb")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9cd3484258e043508f3ab7cdbbafd1cb.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_9c9417615eec4330a5e98fc0ca952346.dll">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
awiqAFEB9AeuAHEBFQK1AHkBdAi7AGkAtATBAIEBCwIQAJEA1wfFAIkBJAgBAJEAswYGAJEB2QHL
AJEBhwjUANkAswbaAPkAswYGAAgALAD9AAgAMAACASAAYwACASEAYwACASkAawAqAi4ACwBpAS4A
EwByAS4AGwCRAS4AIwCaAS4AKwDDAS4AMwDDAS4AOwDDAS4AQwCaAS4ASwDJAS4AUwDDAS4AWwDg
AUAAYwACAUEAYwACAUkAawA3AmAAYwACAWEAYwACAWMAcwACAWkAawBLAoAAYwACAYEAYwACAYMA
ewACAYkAawBVAqAAYwACAaEAYwACAakAawBkAsAAYwACAcEAYwACAckAawBxAuAAYwACAekAgwCR
AQABYwACAQkBgwCRASABYwACASEBYwACAUABYwACAWABYwACAYABYwACARsAAgABAAQABwAFAAkA
AAC4B04BAACDAVYBAAD9AVYBAABnB04BAADECFYBAACmAVYBAABcBloBAABaAl8BAAAcCGQBAgAB
AAMAAQACAAMAAgADAAUAAQAEAAUAAgAFAAcAAQAGAAcAAgAHAAkAAQAIAAkAAgAJAAsAAQAKAAsA
AgALAA0AAQAMAA0AAgARAA8AAgASABEAAQATABEAAgAUABMAZQB1AASAAAABAAAAuiI9MwAAAAAA
ABYAAAAEAAAAAAAAAAAAAADiAIUAAAAAAA0AAAAAAAAAAAAAAOsALgYAAAAAEAAAAAAAAAAAAAAA
9ADCBAAAAAAEAAAAAAAAAAAAAADiAHYFAAAAAAQAAAAAAAAAAAAAAOIAVQAAAAAAAAAAAAEAAAAE
BwAABgADADcAXAAAAABJRW51bWVyYWJsZWAxAExpc3RgMQBTVF85Yzk0MTc2MTVlZWM0MzMwYTVl
OThmYzBjYTk1MjM0NgA8TW9kdWxlPgBTeXN0ZW0uSU8AdmFsdWVfXwBTeXN0ZW0uRGF0YQBTVF85
Y2QzNDg0MjU4ZTA0MzUwOGYzYWI3Y2RiYmFmZDFjYgBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlv
bnMuR2VuZXJpYwA8U3RhdGVQcm92aW5jZT5rX19CYWNraW5nRmllbGQAPEFscGhhVHdvQ29kZT5r
X19CYWNraW5nRmllbGQAPE5hbWU+a19fQmFja2luZ0ZpZWxkADxXZWJQYWdlcz5rX19CYWNraW5n
RmllbGQAPERvbWFpbnM+a19fQmFja2luZ0ZpZWxkADxDb3VudHJ5PmtfX0JhY2tpbmdGaWVsZABE
YkNvbW1hbmQAU3FsQ29tbWFuZABkZWZhdWx0SW5zdGFuY2UAZ2V0X1N0YXRlUHJvdmluY2UAc2V0
X1N0YXRlUHJvdmluY2UAZ2V0X0FscGhhVHdvQ29kZQBzZXRfQWxwaGFUd29Db2RlAENvbGxlZ2UA
SURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBnZXRf
TmFtZQBzZXRfTmFtZQBEYXRlVGltZQBXcml0ZUxpbmUAQ29tYmluZQBTZWN1cml0eVByb3RvY29s
VHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RB
UlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBF
ZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5v
blVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0
cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
VGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNT
SVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUASnNvblByb3BlcnR5QXR0cmlidXRlAEFkZFdp
dGhWYWx1ZQB2YWx1ZQBzZXRfRXhwZWN0MTAwQ29udGludWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lv
bmluZwBEb3dubG9hZFN0cmluZwBUb1N0cmluZwBQYXRoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2Ny
aXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9i
amVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF85Yzk0MTc2MTVlZWM0MzMwYTVlOThm
YzBjYTk1MjM0Ni5kbGwAREJOdWxsAHNldF9TZWN1cml0eVByb3RvY29sAFN5c3RlbQBFbnVtAHJl
c291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBKb2luAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3Rl
bS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24A
RGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24ARXhjZXB0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBO
ZXd0b25zb2Z0Lkpzb24AQ3VsdHVyZUluZm8ARGlyZWN0b3J5SW5mbwBnZXRfUmVzb3VyY2VNYW5h
Z2VyAFNlcnZpY2VQb2ludE1hbmFnZXIAU3FsUGFyYW1ldGVyAFN0cmVhbVdyaXRlcgBUZXh0V3Jp
dGVyAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOWNkMzQ4NDI1OGUw
NDM1MDhmM2FiN2NkYmJhZmQxY2IuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVn
Z2luZ01vZGVzAGdldF9XZWJQYWdlcwBzZXRfV2ViUGFnZXMAU1RfOWNkMzQ4NDI1OGUwNDM1MDhm
M2FiN2NkYmJhZmQxY2IuUHJvcGVydGllcwBTZXR0aW5ncwBnZXRfRG9tYWlucwBzZXRfRG9tYWlu
cwBnZXRfUGFyYW1ldGVycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAQ29u
Y2F0AERlc2VyaWFsaXplT2JqZWN0AFN5c3RlbS5OZXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1
bHQAV2ViQ2xpZW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABKc29uQ29udmVy
dABNb3ZlTmV4dABDcmVhdGVUZXh0AGdldF9Ob3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVy
eQBDcmVhdGVEaXJlY3RvcnkAZ2V0X0NvdW50cnkAc2V0X0NvdW50cnkAAB15AHkAeQB5AE0ATQBk
AGQASABIAG0AbQBzAHMAAB1DADoAXABGAGkAbABlAHMAXABMAG8AZwBzAFwAAAEAT2gAdAB0AHAA
OgAvAC8AdQBuAGkAdgBlAHIAcwBpAHQAaQBlAHMALgBoAGkAcABvAGwAYQBiAHMALgBjAG8AbQAv
AHMAZQBhAHIAYwBoAACAkUQAYQB0AGEAIABTAG8AdQByAGMAZQA9AEUASgBTADsAIABJAG4AaQB0
AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AEEAcwBzAGkAZwBuAG0AZQBuAHQARABXAEgAOwBJAG4A
dABlAGcAcgBhAHQAZQBkACAAUwBlAGMAdQByAGkAdAB5AD0AVAByAHUAZQA7AACBR0kATgBTAEUA
UgBUACAASQBOAFQATwAgAFUAbgBpAHYAZQByAHMAaQB0AHkAIAAoAEQAbwBtAGEAaQBuAHMALAAg
AFMAdABhAHQAZQBQAHIAbwB2AGkAbgBjAGUALAAgAE4AYQBtAGUALAAgAFcAZQBiAFAAYQBnAGUA
cwAsACAAQwBvAHUAbgB0AHIAeQAsACAAQQBsAHAAaABhAFQAdwBvAEMAbwBkAGUAKQAgAFYAQQBM
AFUARQBTACAAKABAAEQAbwBtAGEAaQBuAHMALAAgAEAAUwB0AGEAdABlAFAAcgBvAHYAaQBuAGMA
ZQAsACAAQABOAGEAbQBlACwAIABAAFcAZQBiAFAAYQBnAGUAcwAsACAAQABDAG8AdQBuAHQAcgB5
ACwAIABAAEEAbABwAGgAYQBUAHcAbwBDAG8AZABlACkAABFAAEQAbwBtAGEAaQBuAHMAAAUsACAA
AB1AAFMAdABhAHQAZQBQAHIAbwB2AGkAbgBjAGUAAAtAAE4AYQBtAGUAABNAAFcAZQBiAFAAYQBn
AGUAcwAAEUAAQwBvAHUAbgB0AHIAeQAAG0AAQQBsAHAAaABhAFQAdwBvAEMAbwBkAGUAABNFAHIA
cgBvAHIATABvAGcAXwAACS4AbABvAGcAAHFTAFQAXwA5AGMAZAAzADQAOAA0ADIANQA4AGUAMAA0
ADMANQAwADgAZgAzAGEAYgA3AGMAZABiAGIAYQBmAGQAMQBjAGIALgBQAHIAbwBwAGUAcgB0AGkA
ZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAglbm66MUwTaVp9N1PjzenAAQgAQEIAyAAAQUgAQER
EQQgAQEOBSABARF1FwcKDg4RTQ4SURURVQESCBIIElkSXRJhBAAAEU0EIAEODgQAAQIOBgABEoCF
DgQAAQECBgABARGAjQYQAQEeAA4ICgEVEj0BEggGFRI9ARIICCAAFRFVARMABhURVQESCAQgABMA
BiACAQ4SWQUgABKAoQQGEoClCgACDg4VEoCtAQ4HIAISgLEOHAMgAAgDIAACBgADDg4ODgUAAg4O
DgUAARJhDgMgAA4FIAASgMUIAAESgMkRgM0FIAASgNEHIAIBDhKA0Qi3elxWGTTgiQgwrU/msqau
7QiJhF3NgIDMkQQAAAAABAEAAAAGBhUSPQEOAgYOAwYSbQMGEnEDBhIUAgYIAwYRGAcgABUSPQEO
CCABARUSPQEOBAAAEm0EAAAScQUAAQEScQQAABIUAwAAAQcoABUSPQEOAygADgQIABJtBAgAEnEE
CAASFAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAj
U1RfOWNkMzQ4NDI1OGUwNDM1MDhmM2FiN2NkYmJhZmQxY2IAAAUBAAAAABYBABFDb3B5cmlnaHQg
QCAgMjAyNAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNw
bGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcMAQAHZG9tYWlucwAAEwEADnN0YXRlLXByb3ZpbmNl
AAAJAQAEbmFtZQAADgEACXdlYl9wYWdlcwAADAEAB2NvdW50cnkAABMBAA5hbHBoYV90d29fY29k
ZQAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAAPQ6AAAAAAAAAAAAAA47AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAOwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQA9M7oiAAABAD0zuiI/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfADkAYwBkADMANAA4ADQAMgA1ADgAZQAwADQAMwA1ADAAOABmADMAYQBiADcAYwBkAGIAYgBh
AGYAZAAxAGMAYgAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADgA
OQAwAC4AMQAzADEAMQA3AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABf
ADkAYwA5ADQAMQA3ADYAMQA1AGUAZQBjADQAMwAzADAAYQA1AGUAOQA4AGYAYwAwAGMAYQA5ADUA
MgAzADQANgAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQA
ZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8AOQBjADkANAAxADcANgAxADUAZQBlAGMANAAzADMAMABhADUAZQA5ADgAZgBjADAA
YwBhADkANQAyADMANAA2AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfADkAYwBkADMANAA4ADQAMgA1ADgAZQAwADQAMwA1ADAAOABmADMAYQBiADcAYwBkAGIA
YgBhAGYAZAAxAGMAYgAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4AOAA4ADkAMAAuADEAMwAxADEANwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4AOAA4ADkAMAAuADEAMwAxADEANwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAAAgOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="130.4,41.6"
          Id="Package\Script Task"
          TopLeft="309.999986340603,164.866665937437" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>